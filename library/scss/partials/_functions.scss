/******************************************************************
Site Name: #{$site-name}
Author: #{$author}

Stylesheet: Sass Functions

You can do a lot of really cool things in Sass. Functions help you
make repeated actions a lot easier. They are really similar to mixins,
but can be used for so much more.

Anyway, keep them all in here so it's easier to find when you're
looking for one.

For more info on functions, go here:
http://sass-lang.com/documentation/Sass/Script/Functions.html

******************************************************************/


/*********************
COLOR FUNCTIONS
These are helpful when you're working
with shadows and such things. It's essentially
a quicker way to write RGBA.

Example:
box-shadow: 0 0 4px black(0.3);
compiles to:
box-shadow: 0 0 4px rgba(0,0,0,0.3);
*********************/

// black
@function black($opacity) {
    @return rgba(0,0,0,$opacity);
}

// white
@function white($opacity) {
    @return rgba(255,255,255,$opacity);
}



/************************
	SQUARE ROOTS
*************************/

$pi: 	3.1415926535897932384626433832795028841971693993751;
$e: 	2.71828182845904523536028747135266249775724709369995;
$iter: 	50;

//////////////////////////////
// Random Number
// Working from http://xkcd.com/221/
// Chosen by fair dice roll.
// Guarenteed to be random.
//////////////////////////////

@function rand() {
	@return 4;
}

/*/////////////////////////////
// Exponent
/////////////////////////////*/

@function exponent($base, $exponent) {
	// reset value
	$value: $base;
	
	// positive intergers get multiplied
	@if $exponent > 1 {
		@for $i from 2 through $exponent {
			$value: $value * $base; 
		}
	}
			
	// negitive intergers get divided. A number divided by itself is 1
	@if $exponent < 1 {
		@for $i from 0 through -$exponent {
			$value: $value / $base;
		}
	}
	// return the last value written
	@return $value;
}


@function pow($base, $exponent) {
	@return exponent($base, $exponent);
}


@function sqrt($number) {
	$guess: rand();
	$root: $guess;
	@for $i from 1 through $iter {
		$root: $root - (pow($root, 2) - $number) / (2 * $root);
	}
	@return $root;
}



/*************************************
This converts columns to pixels based 
on the $content width 
*************************************/

@function column-px( $content, $column){
	$container: $content / 12;
	@return ($container * $column);
}



/*********************
RESPONSIVE HELPER FUNCTION
If you're creating a responsive site, then
you've probably already read
Responsive Web Design: http://www.abookapart.com/products/responsive-web-design

Here's a nice little helper function for calculating
target / context
as mentioned in that book.

Example:
width: cp(650px, 1000px);
or
width: calc-percent(650px, 1000px);
both compile to:
width: 65%;
*********************/

@function cp($target, $container) {
  @return calc-percent($target, $container);
}